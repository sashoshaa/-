import os
import random
import asyncio
from fastapi import FastAPI, Request
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
import mysql.connector
from datetime import datetime, timedelta
import requests  # –î–ª—è Telegram API

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
TELEGRAM_BOT_TOKEN = "7435664822:AAHtNmx5XRXPw076Zd1iouulust2_5n27xo"
TELEGRAM_CHAT_ID = "877886344"  # –í–∞—à chat_id
MYSQL_CONFIG = {
    "host": "localhost",
    "user": "root",
    "password": "Dorogusha1",
    "database": "z2"
}

# --- –ê–í–¢–û–°–û–ó–î–ê–ù–ò–ï –§–ê–ô–õ–û–í ---
os.makedirs("templates", exist_ok=True)
os.makedirs("static", exist_ok=True)
os.makedirs("static/css", exist_ok=True)

# Favicon (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏–º)
with open("static/favicon.ico", "wb") as f:
    f.write(b"")

# CSS —Å—Ç–∏–ª–∏
with open("static/css/style.css", "w", encoding="utf-8") as f:
    f.write("""
    :root {
        --primary: #4361ee;
        --secondary: #3f37c9;
        --accent: #4895ef;
    }
    body {
        font-family: 'Segoe UI', sans-serif;
        line-height: 1.6;
        color: #333;
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        background-color: #f8f9fa;
    }
    header {
        background: linear-gradient(135deg, var(--primary), var(--secondary));
        color: white;
        padding: 2rem;
        border-radius: 10px;
        margin-bottom: 2rem;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    .card {
        background: white;
        border-radius: 8px;
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }
    button {
        background-color: var(--accent);
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        transition: all 0.3s;
    }
    button:hover {
        background-color: var(--secondary);
        transform: translateY(-2px);
    }
    .chart-container {
        height: 400px;
        margin: 2rem 0;
    }
    .visits-table {
        width: 100%;
        border-collapse: collapse;
    }
    .visits-table th, .visits-table td {
        padding: 12px;
        text-align: left;
        border-bottom: 1px solid #ddd;
    }
    .visits-table tr:hover {
        background-color: #f5f5f5;
    }
    .alert {
        padding: 15px;
        background-color: #f8d7da;
        color: #721c24;
        border-radius: 5px;
        margin: 1rem 0;
    }
    """)

# HTML —à–∞–±–ª–æ–Ω
with open("templates/dashboard.html", "w", encoding="utf-8") as f:
    f.write("""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Å–µ—â–µ–Ω–∏–π</title>
    <link rel="icon" href="/favicon.ico">
    <link rel="stylesheet" href="/static/css/style.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="/static/script.js"></script>
</head>
<body>
    <header>
        <h1>üìä –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π</h1>
        <p>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è–º–∏</p>
    </header>

    <div class="card">
        <h2>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</h2>
        <div class="controls">
            <button onclick="addVisit()">‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–µ—â–µ–Ω–∏–µ</button>
            <select id="userType">
                <option value="guest">–ì–æ—Å—Ç—å</option>
                <option value="employee">–°–æ—Ç—Ä—É–¥–Ω–∏–∫</option>
                <option value="vip">VIP-–ø–µ—Ä—Å–æ–Ω–∞</option>
            </select>
            <button onclick="startAutoGeneration()">üîÅ –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è</button>
            <button onclick="stopAutoGeneration()">‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</button>
        </div>
    </div>

    <div class="card">
        <h2>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
        <div class="stats">
            <h3>–í—Å–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏–π: <span id="total" class="highlight">0</span></h3>
            <p>–ü–æ—Å–ª–µ–¥–Ω–µ–µ: <span id="lastVisitTime">-</span></p>
        </div>

        <div class="chart-container">
            <canvas id="visitsChart"></canvas>
        </div>
    </div>

    <div class="card">
        <h2>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å–µ—â–µ–Ω–∏—è</h2>
        <div class="table-responsive">
            <table class="visits-table">
                <thead>
                    <tr>
                        <th>–í—Ä–µ–º—è</th>
                        <th>–¢–∏–ø</th>
                        <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                    </tr>
                </thead>
                <tbody id="visitsTableBody"></tbody>
            </table>
        </div>
    </div>

    <div class="card">
        <h2>–û —Å–∏—Å—Ç–µ–º–µ</h2>
        <p>–≠—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è:</p>
        <ul>
            <li>üìà –£—á–µ—Ç–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –æ—Ñ–∏—Å–∞/–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</li>
            <li>üîî –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö</li>
            <li>üìä –ê–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</li>
        </ul>
    </div>
</body>
</html>""")

# JavaScript
with open("static/script.js", "w", encoding="utf-8") as f:
    f.write("""let chart;
let autoGenerationInterval;

async function loadData() {
    try {
        const response = await fetch("/stats");
        if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏");
        const data = await response.json();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        document.getElementById("total").textContent = data.total;
        if (data.visits.length > 0) {
            const lastVisit = new Date(data.visits[0].time);
            document.getElementById("lastVisitTime").textContent = lastVisit.toLocaleString();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        renderVisitsTable(data.visits);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        updateChart(data.visits);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞:", error);
        showAlert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö");
    }
}

function renderVisitsTable(visits) {
    const tableBody = document.getElementById("visitsTableBody");
    tableBody.innerHTML = visits.map(visit => `
        <tr>
            <td>${new Date(visit.time).toLocaleString()}</td>
            <td>${getTypeBadge(visit.type)}</td>
            <td><button onclick="deleteVisit(${visit.id})">–£–¥–∞–ª–∏—Ç—å</button></td>
        </tr>
    `).join("");
}

function getTypeBadge(type) {
    const badges = {
        'guest': '<span class="badge blue">–ì–æ—Å—Ç—å</span>',
        'employee': '<span class="badge green">–°–æ—Ç—Ä—É–¥–Ω–∏–∫</span>',
        'vip': '<span class="badge gold">VIP</span>'
    };
    return badges[type] || type;
}

async function addVisit() {
    const userType = document.getElementById("userType").value;
    try {
        const response = await fetch(`/visit?user_type=${userType}`, { 
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
        });
        
        if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
        await loadData();
        showAlert("–ü–æ—Å–µ—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", "success");
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞:", error);
        showAlert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏");
    }
}

async function deleteVisit(id) {
    if (!confirm("–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å?")) return;
    try {
        const response = await fetch(`/visit/${id}`, { method: 'DELETE' });
        if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
        await loadData();
        showAlert("–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞", "success");
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞:", error);
        showAlert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏");
    }
}

function startAutoGeneration() {
    if (autoGenerationInterval) return;
    autoGenerationInterval = setInterval(async () => {
        const types = ['guest', 'employee', 'vip'];
        const randomType = types[Math.floor(Math.random() * types.length)];
        await fetch(`/visit?user_type=${randomType}`, { method: 'POST' });
        await loadData();
    }, 5000);  // –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    showAlert("–ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞", "success");
}

function stopAutoGeneration() {
    if (autoGenerationInterval) {
        clearInterval(autoGenerationGenerationInterval);
        autoGenerationInterval = null;
        showAlert("–ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", "info");
    }
}

function updateChart(visits) {
    const ctx = document.getElementById('visitsChart').getContext('2d');
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —á–∞—Å–∞–º
    const hours = {};
    visits.forEach(v => {
        const date = new Date(v.time);
        const hour = `${date.getHours()}:00`;
        hours[hour] = (hours[hour] || 0) + 1;
    });
    
    if (chart) chart.destroy();
    
    chart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: Object.keys(hours),
            datasets: [{
                label: '–ü–æ—Å–µ—â–µ–Ω–∏—è –ø–æ —á–∞—Å–∞–º',
                data: Object.values(hours),
                backgroundColor: '#4895ef',
                borderColor: '#4361ee',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        stepSize: 1
                    }
                }
            }
        }
    });
}

function showAlert(message, type = "error") {
    const alert = document.createElement("div");
    alert.className = `alert ${type}`;
    alert.textContent = message;
    document.body.prepend(alert);
    setTimeout(() => alert.remove(), 3000);
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
document.addEventListener('DOMContentLoaded', () => {
    loadData();
    setInterval(loadData, 10000);
});
""")

# --- FASTAPI –ü–†–ò–õ–û–ñ–ï–ù–ò–ï ---
app = FastAPI()
app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")

# --- –†–ê–ë–û–¢–ê –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• ---
def get_db():
    return mysql.connector.connect(**MYSQL_CONFIG)

def init_db():
    try:
        db = get_db()
        cursor = db.cursor()
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS visits (
            id INT AUTO_INCREMENT PRIMARY KEY,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
            user_type VARCHAR(20) DEFAULT 'guest'
        )
        """)
        db.commit()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
    finally:
        if 'db' in locals(): db.close()

init_db()

# --- TELEGRAM –û–ü–û–í–ï–©–ï–ù–ò–Ø ---
async def send_telegram_notification(message: str):
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        return
    
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": message,
        "parse_mode": "HTML"
    }
    
    try:
        response = requests.post(url, json=payload)
        response.raise_for_status()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

# --- API ENDPOINTS ---
@app.post("/visit")
async def add_visit(user_type: str = "guest"):
    db = get_db()
    cursor = db.cursor()
    try:
        cursor.execute("INSERT INTO visits (user_type) VALUES (%s)", (user_type,))
        db.commit()
        visit_id = cursor.lastrowid
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ
        await send_telegram_notification(
            f"üöÄ –ù–æ–≤–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ!\n"
            f"–¢–∏–ø: {user_type}\n"
            f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"ID: {visit_id}"
        )
        
        return {"status": "ok", "id": visit_id}
    finally:
        cursor.close()
        db.close()

@app.delete("/visit/{visit_id}")
async def delete_visit(visit_id: int):
    db = get_db()
    cursor = db.cursor()
    try:
        cursor.execute("DELETE FROM visits WHERE id = %s", (visit_id,))
        db.commit()
        return {"status": "ok", "deleted": cursor.rowcount}
    finally:
        cursor.close()
        db.close()

@app.get("/stats")
async def get_stats():
    db = get_db()
    cursor = db.cursor(dictionary=True)
    try:
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        cursor.execute("SELECT COUNT(*) as total FROM visits")
        total = cursor.fetchone()["total"]
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ—Å–µ—â–µ–Ω–∏–π
        cursor.execute("""
        SELECT 
            id,
            timestamp as time,
            user_type as type
        FROM visits 
        ORDER BY time DESC 
        LIMIT 10
        """)
        visits = cursor.fetchall()
        
        return {"total": total, "visits": visits}
    finally:
        cursor.close()
        db.close()

@app.get("/favicon.ico")
async def favicon():
    return FileResponse("static/favicon.ico")

@app.get("/")
async def dashboard(request: Request):
    return templates.TemplateResponse("dashboard.html", {"request": request})

# --- –§–û–ù–ì–û–í–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø –î–ê–ù–ù–´–• ---
async def background_data_generation():
    while True:
        await asyncio.sleep(random.randint(30, 120))  # –†–∞–Ω–¥–æ–º–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã 30-120 —Å–µ–∫
        user_types = ['guest', 'employee', 'vip']
        user_type = random.choice(user_types)
        await add_visit(user_type)

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
@app.on_event("startup")
async def startup_event():
    asyncio.create_task(background_data_generation())

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
